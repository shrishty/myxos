breakpoint;
print("in exit");
alias physicalSP S0;
alias sysCallNo S1;
alias count S2;
alias currentPID S3;
alias currentPCB S4;

physicalSP = ([PTBR + 2 * (SP/512)] * 512) + SP % 512;

sysCallNo = [physicalSP - 1];

currentPID = (PTBR - 1024)/8;
currentPCB = READY_LIST + currentPID * 32;

if(sysCallNo == 10) then

	print("here ...");
    alias readyProcessCount S5;
    
    readyProcessCount = 0;
    count = 0;
    
  	//  breakpoint;
    while(count < 1024) do
        if([READY_LIST + count + 1] == 1 || ([READY_LIST + count + 1] > 100)) then
            readyProcessCount = readyProcessCount + 1;
        endif;
        count = count + 32;
    endwhile;
    
    //breakpoint;
    if(readyProcessCount == 0) then
        halt;
        ireturn;
    endif;
   
    //breakpoint;
    alias SWOFT S6;
    count = 0;
	
	
    while(count < 16) do
        if([currentPCB + 15 + count] != -1) then
            SWOFT = [currentPCB + 15 + count];
                    
            [FILE_TABLE + 2 * SWOFT + 1] = [FILE_TABLE + 2 * SWOFT +1] - 1;
                    
            if([FILE_TABLE + 2 * SWOFT + 1] == 0) then
                [FILE_TABLE + 2 * SWOFT] = -1;
                endif;
    								                
            [currentPCB + 15 + count + 0] = -1;
            [currentPCB + 15 + count + 1] = -1;
        endif;
            count = count + 2;
    endwhile;
   
   	
    [currentPCB + 1] = 0;
    
    count = PTBR;
    
    while(count < PTBR + (PTLR - 1) * 2) do
        if([count + 0] != -1) then
        	if([count + 0] < 64 && [count + 1]%10 == 1) then
            	[MEM_LIST + [count + 0]] = [MEM_LIST + [count + 0]] - 1;
            else if([count + 0] >= 448 && [count + 0] < 512) then
            		[DISK_LIST + [count + 0]] = [DISK_LIST + [count + 1]] - 1;
            		store(6,20);
        		endif;	
            endif;
		endif;
        count = count + 2;
    endwhile;
    
    count = PTBR;
    while(count < (PTBR + PTLR * 2)) do
        [count + 0] = -1;
        [count + 1] = "00";
        count = count + 2;
    endwhile;
    
    alias temp S7;
    temp = READY_LIST;
    while(temp < (READY_LIST + 32 * 32)) do
    	if([temp + 1] == 100 + currentPID) then
    		[temp + 1] = 1;
		endif;
		temp = temp + 32;
	endwhile;
    
    
    print("starting .........");
    
    alias newPCB S8;
    count = 0;
    newPCB = -1;
   // print([currentPCB + 0]);
    
    if(currentPCB < READY_LIST + 32 * 32) then
    	temp = currentPCB + 32;
    else
    	temp = READY_LIST;
    endif;
    
   // print(currentPCB);
   // print([temp + 4]);
    //breakpoint;
    while(temp != currentPCB) do
        if([temp + 1] == 1) then
          //  print("Entered");
            newPCB  = temp;
            break;
        endif;
        if(temp == READY_LIST + 32 * 32) then
            temp = READY_LIST;
        else
        	temp = temp + 32;
    	endif;
    endwhile;
    
    // print(newPCB);
    if(newPCB == -1) then
        newPCB = currentPCB;
    endif;

    //breakpoint;
    // print(newPCB);
    // print([newPCB + 4]);
    BP = [newPCB + 2];
    SP = [newPCB + 3];
    R0 = [newPCB + 7];
    R1 = [newPCB + 8];
    R2 = [newPCB + 9];
    R3 = [newPCB + 10];
    R4 = [newPCB + 11];
    R5 = [newPCB + 12];
    R6 = [newPCB + 13];
    R7 = [newPCB + 14];
    PTBR = [newPCB + 5];
    PTLR = [newPCB + 6];

    //breakpoint;
    alias newphysicalSP S9;
    SP = SP + 1;
    newphysicalSP = ([PTBR + 2 * (SP/512)]*512) + (SP%512);
    // print(newphysicalSP);
    [newphysicalSP] = [newPCB + 4];
    [newPCB + 1] = 2;
    
    //print("Exit");
    breakpoint;
        
    ireturn;
endif;            


if(sysCallNo == 13) then
	
	print("waitp");
	//breakpoint;
	alias ProcessId S5;
	alias temp S6;
	ProcessId = [physicalSP - 3];
	
	if([READY_LIST + 32 * ProcessId + 1] == 0 || [READY_LIST + 32 * ProcessId + 1] == 2 || ProcessId < 0) then
		[physicalSP - 2] = -1;
		ireturn;
	endif; 
	
	//breakpoint;
	[currentPCB + 1] = 100 + ProcessId;
	inline "JMP 12260";
	[physicalSP - 2] = 0;
	// breakpoint;
	ireturn;
endif;

if(sysCallNo == 14) then
	
	//print("signalp");
	alias count S5;
	count = READY_LIST;

	//breakpoint;
	while(count < (READY_LIST + 32 * 32)) do
		if([count + 1] >= 100) then
			[count + 1] = 1;
		endif;
		count = count + 32;
	endwhile;
	
	[physicalSP - 2] = 0;
	//breakpoint;
	ireturn;
endif;   
                    
                    
            
    
        
    
    
    
