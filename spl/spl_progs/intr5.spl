alias physicalSP S0;
alias sysCallNo S1;
alias count S2;
alias currentPID S3;
alias currentPCB S4;
alias child_PCB S5;
alias child_PTBR S6;

physicalSP = ([PTBR + 2 * (SP/512)] * 512) + SP % 512;

sysCallNo = [physicalSP -1];
currentPID = (PTBR - 1024)/8;
currentPCB = READY_LIST + currentPID * 32;
print("working");

if(sysCallNo == 8) then
    count = 0;
    child_PCB = -1;
    
    while(count < 1024) do
        if([READY_LIST+ count + 1] == 0) then
            child_PCB = count + READY_LIST;
            break;
        endif;
        count = count + 32;
    endwhile;
    
    if(child_PCB == -1) then
        [physicalSP - 2] = -1;
        ireturn;
    endif;
    
    [child_PCB + 0]  = count/32;
    
    alias validPages S9;
    count = 0;
    validPages = 0;
    while(count < PTLR) do
        if([PTBR + 2 * count + 1]% 10 == 1) then
            validPages = validPages + 1;
        endif;
        count = count + 1;
    endwhile;
    
    count = 0;
    alias freeMemoryNo S10;
    freeMemoryNo = 0;
    
    while(count < 64) do
        if([MEM_LIST + count] == 0) then
            freeMemoryNo = freeMemoryNo + 1;
        endif;
        if(freeMemoryNo == validPages) then
            break;
        endif;
        count = count + 1;
    endwhile;
    
    if(freeMemoryNo < validPages) then
        [physicalSP - 2] = -1;
        ireturn;
    endif;
    
    
    child_PTBR = 1024 + [child_PCB + 0] * 8;
    [child_PCB + 5] = child_PTBR;
    
    count = 0;
    alias count1 S9;
    alias PTCounter S11;
    count1 = 0;
    PTCounter = 0;
    print("working");
    while(count1 < 64) do
        if([MEM_LIST + count1] == 0 && count < freeMemoryNo) then
            if([PTBR + PTCounter * 2 + 1]%10 == 1) then
                alias count2 S12;
                count2 = 0;
                
                alias parentPage S13;
                alias childPage S14;
                
                parentPage = [PTBR + PTCounter*2 +0];
                childPage = count1;
                
                while(count2 < 512) do
                    [parentPage*512 + count2] = [childPage*512 + count2];
                    count2 = count2 + 1;
                endwhile;
                
                count2 = 0;
                while(count2 < PTLR) do
                    [child_PTBR + 2 * count2 + 0] = childPage;
                    [child_PTBR + 2 * count2 + 1] = [PTBR + 2 * count2 + 1];
                    count2 = count2 + 1;
                endwhile;
                
                [MEM_LIST + count1] = 1;
                count = count + 1;
                PTCounter = PTCounter + 1;
                count1 = count1 + 1;
            else
                PTCounter = PTCounter + 1;
            endif;
        endif;
    endwhile;
    
    [child_PCB + 4] = [physicalSP];
    
    [child_PCB + 3] = SP - 1;
    [child_PCB + 2] = BP;
    [child_PCB + 6] = PTLR;
    [child_PCB + 7] = R0;
    [child_PCB + 8] = R1;
    [child_PCB + 9] = R2;
    [child_PCB + 10] = R3;
    [child_PCB + 11] = R4;
    [child_PCB + 12] = R5;
    [child_PCB + 13] = R6;
    [child_PCB + 14] = R7;
    
    count = 0;
    while(count < 8) do
        [child_PCB + 15 + count*2 + 0] = [currentPCB + 15 + count*2 + 0];
        [child_PCB + 15 + count*2 + 1] = [currentPCB + 15 + count*2 + 1];
        if([child_PCB + 15 + count*2 + 0] != -1) then
            alias SWOFT S11;
            SWOFT = [currentPCB + 15 + count*2 + 0];
            [FILE_TABLE + 2*SWOFT + 1] = [FILE_TABLE + 2*SWOFT + 1] + 1;
        endif;
        count = count + 1;
    endwhile;
    
    [child_PCB + 1] = 1;
    
    [physicalSP - 2] = [child_PCB + 0];
    
    alias child_physicalSP S12;
    child_physicalSP = ([child_PTBR + 2 * ((SP-1)/512)] * 512) + (SP-1) % 512;
    [child_physicalSP - 2] = -2;
    
    ireturn;
endif;

