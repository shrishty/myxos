alias physicalSP S0;
alias sysCallNo S1;
alias count S2;
alias currentPID S3;
alias currentPCB S4;

physicalSP = ([PTBR + 2 * (SP/512)] * 512) + SP % 512;

sysCallNo = [physicalSP - 1];
currentPID = (PTBR - 1024)/8;
currentPCB = READY_LIST + currentPID * 32;

if(sysCallNo == 10) then
    alias readyProcessCount S5;
    
    readyProcessCount = 0;
    count = 0;
    
    breakpoint;
    while(count < 1024) do
        if([READY_LIST + count + 1] == 1) then
            readyProcessCount = readyProcessCount + 1;
        endif;
        count = count + 32;
    endwhile;
    
    breakpoint;
    print("ready");
    print(readyProcessCount);
    if(readyProcessCount == 0) then
        halt;
        ireturn;
    endif;
   
   breakpoint;
    alias SWOFT S6;
    count = 0;
	
	
    while(count < 16) do
        if([currentPCB + 15 + count] != -1) then
            SWOFT = [currentPCB + 15 + count];
                    
            [FILE_TABLE + 2 * SWOFT + 1] = [FILE_TABLE + 2 * SWOFT +1] - 1;
                    
            if([FILE_TABLE + 2 * SWOFT + 1] == 0) then
                [FILE_TABLE + 2 * SWOFT + 0] = -1;
                endif;
    								                
            [currentPCB + 15 + count + 0] = -1;
            [currentPCB + 15 + count + 1] = -1;
        endif;
            count = count + 2;
    endwhile;
   
   	
    [currentPCB + 1] = 0;
    
    count = PTBR;
    
    while(count < PTBR + (PTLR - 1) * 2) do
        if([PTBR + count] != -1) then
            [MEM_LIST + [PTBR + count]] = 0;
        endif;
        count = count + 2;
    endwhile;

	count = PTBR;    
    while(count < (PTBR + PTLR * 2)) do
        [count + 0] = -1;
        [count + 1] = "00";
        count = count + 2;
    endwhile;

    
    alias temp S7;
    alias newPCB S8;
    count = 0;
    newPCB = -1;
    temp = currentPCB + 32;
    
   print(currentPCB);
   // print([temp + 4]);
    breakpoint;
    while(temp != currentPCB) do
    	print([temp + 0]);
        if([temp + 1] == 1) then
            print("Entered");
            newPCB  = temp;
            break;
        endif;
        if(temp == READY_LIST + 32 *31) then
            temp = READY_LIST;
        else
        	temp = temp + 32;
		endif;
    endwhile;
    
    print(newPCB +0);
    if(newPCB == -1) then
        newPCB = currentPCB;
    endif;

    breakpoint;
    // print(newPCB);
    // print([newPCB + 4]);
    BP = [newPCB + 2];
    SP = [newPCB + 3];
    R0 = [newPCB + 7];
    R1 = [newPCB + 8];
    R2 = [newPCB + 9];
    R3 = [newPCB + 10];
    R4 = [newPCB + 11];
    R5 = [newPCB + 12];
    R6 = [newPCB + 13];
    R7 = [newPCB + 14];
    PTBR = [newPCB + 5];
    PTLR = [newPCB + 6];

    breakpoint;
    alias newphysicalSP S9;
    SP = SP + 1;
    print(SP);
	print(PTBR);
	print(PTBR + 2 * (SP/512));
    newphysicalSP = ([PTBR + 2 * (SP/512)]*512) + (SP%512);
    print(newphysicalSP);
    [newphysicalSP] = [newPCB + 4];
    [newPCB + 1] = 2;
    
    breakpoint;    
    ireturn;
endif;            
   
                    
                    
            
    
        
    
    
    
